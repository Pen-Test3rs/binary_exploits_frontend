import { User } from '../models/user';
import { LoginData } from '../models/loginData';
import { RegisterData } from '../models/registerData';
import axiosInstance from '../utils/axiosInterceptors';
import { Token } from '../models/token';
import { apiUrls } from '../utils/apiUrls';
import { AxiosRequestConfig } from 'axios';
import store from '../context/store';
import { updateTokens } from '../context/userReducer';

const loginUserWorker = async (token: string): Promise<User> => {
    return new Promise((resolve, reject) => {
        axiosInstance
            .get(apiUrls.ME, { headers: { Authorization: `Bearer ${token}` } })
            .then((res) => {
                const data = res.data;
                const user: User = {
                    id: data.id,
                    username: data.username,
                    email: data.email
                };
                resolve(user);
            })
            .catch((err) => {
                reject(err);
            });
    });
};

const loginUser = async (loginData: LoginData): Promise<User> => {
    const token = await getToken(loginData.username, loginData.password);

    const userToken: Token = {
        accessToken: token.accessToken,
        refreshToken: token.refreshToken
    };

    const user = await loginUserWorker(token.accessToken);
    user.token = userToken;

    return user;
};

const getToken = async (username: string, password: string): Promise<Token> => {
    return new Promise((resolve, reject) => {
        axiosInstance
            .post(apiUrls.TOKEN, { username: username, password: password })
            .then((res) => {
                const data = res.data;
                const token: Token = {
                    accessToken: data.access,
                    refreshToken: data.refresh
                };

                resolve(token);
            })
            .catch((err) => {
                reject(err);
            });
    });
};

const registerUserWorker = async (registerData: RegisterData): Promise<User> => {
    return new Promise((resolve, reject) => {
        axiosInstance
            .post(apiUrls.REGISTER, registerData)
            .then(async (res) => {
                const data = res.data;
                const user: User = {
                    id: data.id,
                    username: data.username,
                    email: data.email
                };

                resolve(user);
            })
            .catch((err) => {
                reject(err);
            });
    });
};

const registerUser = async (registerData: RegisterData): Promise<User> => {
    const user = await registerUserWorker(registerData);
    const token = await getToken(user.username, registerData.password);

    user.token = {
        accessToken: token.accessToken,
        refreshToken: token.refreshToken
    };

    return user;
};

const getItemFromSessionStorage = (key: string) => {
    const value = sessionStorage.getItem(key);
    if (value != null && value !== '') {
        return value;
    }
    return null;
};

const getAccessToken = () => {
    return getItemFromSessionStorage('accessToken');
};

const getRefreshToken = () => {
    return getItemFromSessionStorage('refreshToken');
};

const getNewAccessToken = async (refreshToken: string): Promise<Token> => {
    return new Promise((resolve, reject) => {
        axiosInstance
            .post(apiUrls.REFRESH_TOKEN, { refresh: refreshToken })
            .then((res) => {
                const data = res.data;
                const token: Token = {
                    accessToken: data.access,
                    refreshToken: data.refresh
                };
                resolve(token);
            })
            .catch((err) => {
                console.error('getNewToken failed');
                console.error(err);
                reject(err);
            });
    });
};

const refreshUserToken = (config: AxiosRequestConfig) => {
    const refreshToken = getRefreshToken();
    if (refreshToken == null) {
        return Promise.reject('No refreshToken in sessionStorage');
    }

    return new Promise((resolve, reject) => {
        getNewAccessToken(refreshToken)
            .then((token) => {
                store.dispatch(updateTokens(token));

                config.headers.Authorization = `Bearer ${token.accessToken}`; // inject new token to old request
                axiosInstance
                    .request(config) // repeat original request
                    .then((result) => {
                        return resolve(result);
                    })
                    .catch((err) => {
                        return reject(err);
                    });
            })
            .catch((err) => {
                console.error('refreshToken failed');
                reject(err);
            });
    });
};

export const authService = {
    loginUser,
    registerUser,
    getAccessToken,
    getNewAccessToken,
    refreshUserToken
};
