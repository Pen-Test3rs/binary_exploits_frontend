import axiosInstance from '../utils/axiosInterceptors';
import { AxiosRequestConfig, AxiosResponse } from 'axios';
import { Article, ArticleCategory } from '../models/article';
import { apiUrls } from '../utils/apiUrls';

const responseBody = (response: AxiosResponse) => response.data;

const getAll = async (options?: AxiosRequestConfig): Promise<ArticleCategory[]> => {
    return axiosInstance.get(apiUrls.ARTICLES, options).then(responseBody);
};

// TODO: remove
const testResolveTimeout = async (options?: AxiosRequestConfig): Promise<ArticleCategory[]> => {
    return new Promise<ArticleCategory[]>((resolve, reject) => {
        setTimeout(() => {
            resolve(getAll(options));
        }, 10000);
    });
};

// TODO: remove
const testResolveError = async (options?: AxiosRequestConfig): Promise<ArticleCategory[]> => {
    return new Promise<ArticleCategory[]>((resolve, reject) => {
        setTimeout(() => reject('testResolveError'), 100);
    });
};

const getOne = async (id: string, options?: AxiosRequestConfig): Promise<Article> => {
    const url = `${apiUrls.ARTICLES}${id}/`;
    return axiosInstance.get(url, options).then(responseBody);
};

export const articleService = {
    getAll,
    getOne,
    testResolveTimeout,
    testResolveError
};
