import { createSlice } from '@reduxjs/toolkit';
import { WritableDraft } from 'immer/dist/internal';
import { User } from '../models/user';
import { RootState } from './store';
import { Token } from '../models/token';

const initialState: User = {
    id: undefined,
    username: '',
    email: '',
    token: undefined
};

const clearTokens = () => {
    sessionStorage.removeItem('accessToken');
    sessionStorage.removeItem('refreshToken');
};

const setTokens = (token: WritableDraft<Token> | undefined) => {
    sessionStorage.setItem('accessToken', token?.accessToken || '');
    sessionStorage.setItem('refreshToken', token?.refreshToken || '');
};

export const userSlice = createSlice({
    name: 'user',
    initialState,
    reducers: {
        registerFailure: (state) => {
            clearTokens();
            return initialState;
        },
        registerSuccess: (state, action) => {
            const user = action.payload;
            setTokens(user?.token);
            return user;
        },
        loginFailure: (state) => {
            clearTokens();
            return initialState;
        },
        loginSuccess: (state, action) => {
            const user = action.payload;
            setTokens(user?.token);
            return user;
        },
        logout: (state) => {
            clearTokens();
            return initialState;
        },
        updateTokens: (state, action) => {
            state.token = action.payload;
            setTokens(state.token);
        }
    }
});

export const { registerSuccess, registerFailure, loginSuccess, loginFailure, logout, updateTokens } = userSlice.actions;

export const isLoggedIn = (state: RootState) => state.userReducer.id !== undefined;

export default userSlice.reducer;
