import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { emptyUser, User } from '../models/user';
import { RootState } from './store';
import { Token } from '../models/token';

const extractWorker = <T>(properties: Record<keyof T, true>) => {
    return function <TActual extends T>(value: TActual) {
        let result = {} as T;
        for (const property of Object.keys(properties) as Array<keyof T>) {
            result[property] = value[property];
        }
        return result;
    };
};

const extractData = extractWorker<User>({
    id: true,
    email: true,
    username: true,
    token: true
});

export const userSlice = createSlice({
    name: 'user',
    initialState: emptyUser,
    reducers: {
        registerFailure: (state) => {
            return emptyUser;
        },
        registerSuccess: (state, action) => {
            return extractData<User>(action.payload);
        },
        loginFailure: (state) => {
            return emptyUser;
        },
        loginSuccess: (state, action) => {
            return extractData<User>(action.payload);
        },
        logout: (state) => {
            return emptyUser;
        },
        updateTokens: (state, action: PayloadAction<Token>) => {
            state.token = action.payload;
        },
        updateUser: (state, action) => {
            const token = state.token;
            const userData = extractData<User>(action.payload);
            userData.token = token;
            return userData;
        },
        deleteUser: (state) => {
            return emptyUser;
        }
    }
});

export const {
    registerSuccess,
    registerFailure,
    loginSuccess,
    loginFailure,
    logout,
    updateTokens,
    updateUser,
    deleteUser
} = userSlice.actions;

export const isLoggedIn = (state: RootState) => state.userReducer.id !== undefined;
export const currentUserData = (state: RootState) => state.userReducer;

export default userSlice.reducer;
