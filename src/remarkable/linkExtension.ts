import { Remarkable } from 'remarkable';
import { LinkOpenToken } from 'remarkable/lib';

enum LinkType {
    DEFAULT = 0,
    VIDEO,
    ATTACHMENT,
    GIF
}

const prefixMap: Record<string, LinkType> = {
    video: LinkType.VIDEO,
    attachment: LinkType.ATTACHMENT,
    gif: LinkType.GIF
};

const determineLinkType = (href: string) => {
    const type = href.split(':', 1).pop();
    if (type === undefined) {
        return LinkType.DEFAULT;
    }

    const v = prefixMap[type];
    return v !== undefined ? v : LinkType.DEFAULT;
};

const typeToComponentMapping: Record<LinkType, string> = {
    [LinkType.DEFAULT]: 'link_open',
    [LinkType.VIDEO]: 'link_video_open',
    [LinkType.ATTACHMENT]: 'link_attachment_open',
    [LinkType.GIF]: 'link_gif_open'
};

export const injectTokenRecognizer = (
    md: Remarkable,
    originalParser: any // InlineParsingRule
) => {
    md.inline.ruler.at(
        'links',
        (state, silent) => {
            let parsedSuccessfully = originalParser(state, silent);
            if (!parsedSuccessfully) {
                return parsedSuccessfully;
            }

            for (let token of state.tokens) {
                if (token.type === 'link_open') {
                    const link = token as LinkOpenToken;
                    const type = determineLinkType(link.href);
                    if (type !== LinkType.DEFAULT) {
                        const linkTokens = link.href.split(':').slice(1);
                        link.href = linkTokens.join(':');
                        token.type = typeToComponentMapping[type];
                    }
                }
            }

            return parsedSuccessfully;
        },
        {}
    );
};
