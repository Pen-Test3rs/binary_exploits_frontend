import React, { useRef } from 'react';
import { LoginData } from '../../models/LoginData';
import LoginFormHeader from './loginFormHeader';
import LoginFormPasswordForgot from './loginFormPasswordForgot';
import { useForm } from 'react-hook-form';
import LoginFormErrorLabel from './loginFormErrorLabel';

function signupUser() {
    return new Promise((resolve) => {
        setTimeout(resolve, 2000);
    });
}

const initialState = {
    email: '',
    nick: '',
    password: '',
    passwordConfirmation: ''
};

const requiredFieldText = 'This field is required';

const LoginFormComponent: React.FC = () => {
    const {
        register,
        handleSubmit,
        watch,
        formState: { errors }
    } = useForm<LoginData>();
    const password = useRef({});
    password.current = watch('password', '');

    const onSubmit = (data: any) => {
        //TODO: should we validate data here?
        console.log(data);
    };

    //TODO: error handling
    //TODO: loading spinner
    //TODO: post request to backend, after success redirect to home page (dashboard with challenges etc)

    const validateFields = (): boolean => {
        //TODO: verify fields, set errors, and display them on under fields

        return false;
    };

    //TODO: maybe separate view and logic (containers/components)
    return (
        <div className="min-h-screen flex items-center justify-center bg-gray-100 py-12 px-4 sm:px-6 lg:px-8">
            <div className="max-w-md w-full space-y-8">
                <LoginFormHeader />
                <form
                    className="mt-8 space-y-6"
                    onSubmit={handleSubmit(onSubmit)}
                    method="POST"
                >
                    <div className="rounded-md shadow-sm space-y-3">
                        <input
                            id="nick"
                            {...register('nick', {
                                required: requiredFieldText,
                                minLength: {
                                    value: 3,
                                    message: 'Provided text is too short'
                                }
                            })}
                            type="text"
                            //TODO: exctract common styles of the input fields and move to separate class (or .css)
                            className="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
                            placeholder="Your nick"
                        />
                        <LoginFormErrorLabel errorKeys={errors?.nick} />

                        <input
                            id="email"
                            {...register('email', {
                                required: requiredFieldText,
                                pattern: {
                                    value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$/i,
                                    message: 'Enter a valid e-mail address'
                                }
                            })}
                            type="text"
                            className="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
                            placeholder="Email address"
                        />
                        <LoginFormErrorLabel errorKeys={errors?.email} />

                        <input
                            id="password"
                            {...register('password', {
                                required: requiredFieldText,
                                minLength: {
                                    value: 8,
                                    message:
                                        'Password cannot be shorter than 8 characters'
                                }
                            })}
                            type="password"
                            className="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
                            placeholder="Password"
                        />
                        <LoginFormErrorLabel errorKeys={errors?.password} />

                        <input
                            id="passwordConfirmation"
                            {...register('passwordConfirmation', {
                                required: requiredFieldText,
                                minLength: {
                                    value: 8,
                                    message:
                                        'Password cannot be shorter than 8 characters'
                                },
                                validate: (value) =>
                                    value === password.current ||
                                    "Passwords don't match"
                            })}
                            type="password"
                            className="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-b-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
                            placeholder="Retype password"
                        />
                        <LoginFormErrorLabel
                            errorKeys={errors?.passwordConfirmation}
                        />
                    </div>

                    <LoginFormPasswordForgot />

                    <div>
                        <button
                            type="submit"
                            className="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                        >
                            Sign in
                        </button>
                    </div>
                </form>
            </div>
        </div>
    );
};

export default LoginFormComponent;
