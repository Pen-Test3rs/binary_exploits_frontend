import React, { useEffect, useState } from 'react';
import { ratingService } from '../../services/ratingService';
import { Rating } from '../../models/rating';
import { useTable } from 'react-table';
import { useAppSelector } from '../../context/hooks';
import { userData } from '../../context/userReducer';

const RatingCard = () => {
    const user = useAppSelector(userData);
    const [rating, setRating] = useState<Rating[]>([]);
    useEffect(() => {
        (async () => {
            ratingService
                .get()
                .then((res) => {
                    console.log(res);
                    setRating(res);
                })
                .catch((err) => {
                    //TODO: handle error
                    console.error(err);
                });
        })();
    }, []);

    let newRating: any[] = [];

    rating.map((r) => newRating.push({ place: r.place, username: r.username, points: r.points, solved: r.solved }));

    const data = React.useMemo(() => newRating, [rating]);

    const columns = React.useMemo(
        () => [
            {
                Header: 'Miejsce',
                accessor: 'place' // accessor is the "key" in the data
            },
            {
                Header: 'Nick',
                accessor: 'username'
            },
            {
                Header: 'Ilość punktów',
                accessor: 'points'
            },
            {
                Header: 'Ilość rozwiązanych zadań',
                accessor: 'solved'
            }
        ],
        []
    );

    const tableInstance = useTable({ columns, data });

    const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } = tableInstance;

    return (
        <>
            {newRating.length > 0 ? (
                <table {...getTableProps()} className="w-full border-b-0 border border-gray-400 table-auto">
                    <thead className="border-none">
                        {headerGroups.map((headerGroup) => (
                            <tr {...headerGroup.getHeaderGroupProps()} className="border-none">
                                {headerGroup.headers.map((column) => (
                                    <th
                                        {...column.getHeaderProps()}
                                        className="p-3 font-bold uppercase bg-gray-300 text-gray-600 border-0 border-r border-gray-400 table-cell"
                                    >
                                        {column.render('Header')}
                                    </th>
                                ))}
                            </tr>
                        ))}
                    </thead>
                    <tbody {...getTableBodyProps()} className="border-none">
                        {rows.map((row) => {
                            prepareRow(row);
                            return (
                                <tr
                                    {...row.getRowProps()}
                                    className={`border-none bg-white flex table-row flex-row flex-row flex-wrap flex-no-wrap mb-0`}
                                >
                                    {row.cells.map((cell) => {
                                        return (
                                            <td
                                                {...cell.getCellProps()}
                                                className={`w-full w-auto p-3 'text-gray-800' text-center border-l-0 border border-gray-400 block table-cell relative static`}
                                            >
                                                {cell.render('Cell')}
                                            </td>
                                        );
                                    })}
                                </tr>
                            );
                        })}
                    </tbody>
                </table>
            ) : null}
        </>
    );
};

export default RatingCard;
