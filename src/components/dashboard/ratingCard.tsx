import React from 'react';
import { ratingService } from '../../services/ratingService';
import { Rating } from '../../models/rating';
import { useTable } from 'react-table';
import useAxiosEffect from '../generic/useAxiosEffect';
import { useAppSelector } from '../../context/hooks';
import { currentUserData } from '../../context/userReducer';

const countPlaces = (data: Rating[]) => {
    return (
        data?.map((r) => ({
            ...r,
            place: data.filter(({ points }) => points > r.points).length + 1
        })) ?? []
    );
};

const getPlace = (place: number) => {
    switch (place) {
        case 1:
            return (
                <img className="block m-auto" src="https://img.icons8.com/officel/30/000000/gold-medal.png" alt="1" />
            );
        case 2:
            return (
                <img
                    className="block m-auto"
                    src="https://img.icons8.com/officel/30/000000/olympic-medal-silver.png"
                    alt="2"
                />
            );
        case 3:
            return (
                <img
                    className="block m-auto"
                    src="https://img.icons8.com/offices/30/000000/olympic-medal-bronze.png"
                    alt="3"
                />
            );
        default:
            return place;
    }
};

const RatingCard = () => {
    const user = useAppSelector(currentUserData);
    const state = useAxiosEffect<Rating[]>(ratingService.get, []);
    const ratingData = state.data as Rating[];

    let newRating: any[] = [];

    const rating = countPlaces(ratingData);
    rating
        .sort((r1, r2) => r1.place - r2.place)
        .forEach((r) =>
            newRating.push({ place: getPlace(r.place), username: r.username, points: r.points, solved: r.solved })
        );

    const data = React.useMemo(() => newRating, [rating]);
    const columns = React.useMemo(
        () => [
            {
                Header: 'Miejsce',
                accessor: 'place' // accessor is the "key" in the data
            },
            {
                Header: 'Nick',
                accessor: 'username'
            },
            {
                Header: 'Ilość punktów',
                accessor: 'points'
            },
            {
                Header: 'Ilość rozwiązanych zadań',
                accessor: 'solved'
            }
        ],
        []
    );

    const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } = useTable({
        columns,
        data
    });

    return (
        <div className="w-11/12 sm:w-10/12 rounded-lg shadow relative inline-block overflow-hidden">
            {newRating.length > 0 && (
                <table {...getTableProps()} className="leading-normal w-full relative">
                    <thead>
                        {headerGroups.map((headerGroup) => (
                            <tr {...headerGroup.getHeaderGroupProps()}>
                                {headerGroup.headers.map((column) => (
                                    <th
                                        {...column.getHeaderProps()}
                                        className="border-b-2 border-gray-200 bg-gray-100 px-5 py-3 uppercase font-semibold text-sm text-gray-600 text-center table-cell"
                                    >
                                        {column.render('Header')}
                                    </th>
                                ))}
                            </tr>
                        ))}
                    </thead>
                    <tbody {...getTableBodyProps()}>
                        {rows.map((row) => {
                            prepareRow(row);
                            return (
                                <tr
                                    {...row.getRowProps()}
                                    className={`${
                                        row.values.username === user.username
                                            ? 'bg-gray-600 text-gray-300'
                                            : 'bg-white text-gray-900'
                                    } px-5 py-5 border-b border-gray-200 table-row text-sm`}
                                >
                                    {row.cells.map((cell) => {
                                        return (
                                            <td
                                                {...cell.getCellProps()}
                                                className={`p-3 text-center align-middle table-cell`}
                                            >
                                                {cell.render('Cell')}
                                            </td>
                                        );
                                    })}
                                </tr>
                            );
                        })}
                    </tbody>
                </table>
            )}
        </div>
    );
};

export default RatingCard;
