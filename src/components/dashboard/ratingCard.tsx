import React from 'react';
import { Dashboard } from '../../models/dashboard';
import { useTable } from 'react-table';
import { useAppSelector } from '../../context/hooks';
import { currentUserData } from '../../context/userReducer';
import { Link } from 'react-router-dom';

interface RatingTableProps {
    ratingData: Dashboard[];
}

const countPlaces = (data: Dashboard[]) => {
    return (
        data?.map((r) => ({
            ...r,
            place: getPlace(data.filter(({ points }) => points > r.points).length + 1),
            username: r.username
        })) ?? []
    );
};

const getPlace = (place: number) => {
    switch (place) {
        case 1:
            return <img width="28" height="28" className="m-auto" src={'/medals/gold-medal.png'} alt="1" />;
        case 2:
            return <img width="28" height="28" className="m-auto" src={'/medals/silver-medal.png'} alt="2" />;
        case 3:
            return <img width="28" height="28" className="m-auto" src={'/medals/bronze-medal.png'} alt="3" />;
        default:
            return place;
    }
};

const RatingCard = ({ ratingData }: RatingTableProps) => {
    const user = useAppSelector(currentUserData);

    const rating: any[] = countPlaces(ratingData);

    const data = React.useMemo(() => rating, [ratingData]);
    const columns = React.useMemo(
        () => [
            {
                Header: 'ID',
                accessor: 'id'
            },
            {
                Header: 'Miejsce',
                accessor: 'place',
                width: 'w-1/4'
            },
            {
                Header: 'Nick',
                accessor: 'username',
                width: 'w-5/12'
            },
            {
                Header: 'Punkty',
                accessor: 'points',
                width: 'w-1/6'
            },
            {
                Header: 'RozwiÄ…zane zadania',
                accessor: 'solved',
                width: 'w-1/6'
            }
        ],
        []
    );

    const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } = useTable({
        columns,
        data,
        initialState: {
            hiddenColumns: ['id']
        }
    });

    return (
        <div className="rounded-lg shadow relative inline-block overflow-hidden">
            {rating.length > 0 && (
                <table {...getTableProps()} className="select-none border-separate border-spacing-0">
                    <thead>
                        {headerGroups.map((headerGroup) => (
                            <tr {...headerGroup.getHeaderGroupProps()}>
                                {headerGroup.headers.map((column) => (
                                    <th
                                        {...column.getHeaderProps()}
                                        className={`${column.width} border-b-2 border-gray-300 bg-gray-100 px-5 py-3 
                                                    uppercase font-semibold text-xs text-gray-600 text-center`}
                                    >
                                        {column.render('Header')}
                                    </th>
                                ))}
                            </tr>
                        ))}
                    </thead>
                    <tbody {...getTableBodyProps()}>
                        {rows.map((row) => {
                            prepareRow(row);
                            return (
                                <tr
                                    {...row.getRowProps()}
                                    className={`${
                                        row.values.id === user.id
                                            ? 'bg-gray-600 text-gray-300'
                                            : 'bg-white text-gray-900'
                                    } text-sm hover:bg-gray-300
                                      hover:text-gray-900 cursor-pointer`}
                                >
                                    {row.cells.map((cell) => {
                                        return (
                                            <td {...cell.getCellProps()} className="p-0">
                                                <Link
                                                    to={`profile/${row.values.id}`}
                                                    className="border-b border-gray-300 px-3 h-12
                                                              flex justify-center items-center text-current"
                                                >
                                                    {cell.render('Cell')}
                                                </Link>
                                            </td>
                                        );
                                    })}
                                </tr>
                            );
                        })}
                    </tbody>
                </table>
            )}
        </div>
    );
};

export default RatingCard;
