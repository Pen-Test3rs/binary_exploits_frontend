import SuperGif from 'libgif';
import { useEffect, useRef, useState } from 'react';
import { FaBackward, FaForward, FaPause, FaPlay, FaStop } from 'react-icons/all';
import { IconType } from 'react-icons';

type SuperGif = any; //we dont have types for libgif
type GifFunc = (superGif: SuperGif) => boolean;

const gif_play = (superGif: SuperGif) => {
    superGif.play();
    return true;
};

const gif_pause = (superGif: SuperGif) => {
    superGif.pause();
    return false;
};

const gif_stop = (superGif: SuperGif) => {
    gif_pause(superGif);
    superGif.move_to(0);
    return false;
};

const gif_prev = (superGif: SuperGif) => {
    gif_pause(superGif);
    superGif.move_relative(-1);
    return false;
};

const gif_next = (superGif: SuperGif) => {
    gif_pause(superGif);
    if (superGif.get_current_frame() === superGif.get_frames().length - 1) {
        return false;
    }

    superGif.move_relative(1);
    return false;
};

interface GifInterface {
    href: string;
}

const Gif = ({ href }: GifInterface) => {
    const imageRef = useRef<HTMLImageElement>(null);
    const outerDiv = useRef<HTMLDivElement>(null);
    const [superGif, setSuperGif] = useState<SuperGif>();
    const [playing, setPlaying] = useState(false);

    useEffect(() => {
        if (!imageRef.current) {
            return;
        }

        if (superGif !== undefined) {
            setPlaying(gif_stop(superGif));
            return;
        }

        const instance: SuperGif = new SuperGif({
            gif: imageRef.current,
            auto_play: false,
            loop_mode: false,
            show_progress_bar: false,
            draw_while_loading: true,
            on_end: () => setPlaying(false)
        });
        setSuperGif(instance);
        instance.load(() => {
            setPlaying(gif_stop(instance));
            if (outerDiv.current !== null) {
                outerDiv.current.addEventListener('click', function (e) {
                    const elem = e.target as HTMLElement;
                    if (elem.tagName === 'CANVAS') {
                        if (instance.get_playing()) {
                            gif_pause(instance);
                        } else {
                            gif_play(instance);
                        }
                        setPlaying(instance.get_playing());
                    }
                });
            }
        });
    }, []);

    const renderControlButton = (Icon: IconType, func: GifFunc) => {
        return (
            <button className="flex cursor-pointer my-auto">
                <Icon onClick={() => setPlaying(func(superGif))} />
            </button>
        );
    };

    return (
        <div ref={outerDiv} className="box-border inline-block relative text-center w-full">
            <img ref={imageRef} src={href} alt={href} />
            <div className="flex justify-center align-center space-x-5 h-9 bg-black text-white z-50">
                {!playing ? renderControlButton(FaPlay, gif_play) : renderControlButton(FaPause, gif_pause)}
                {renderControlButton(FaStop, gif_stop)}
                {renderControlButton(FaBackward, gif_prev)}
                {renderControlButton(FaForward, gif_next)}
            </div>
        </div>
    );
};

export default Gif;
