import { useEffect, useState } from 'react';
import axios, { AxiosError, AxiosRequestConfig } from 'axios';

type GetFunction<T> = (options?: AxiosRequestConfig) => Promise<T>;

const useAxiosEffect = <T>(getData: GetFunction<T>) => {
    const [data, setData] = useState<T>();
    const [error, setError] = useState<AxiosError>();
    const [isLoading, setLoading] = useState(true);

    useEffect(() => {
        console.log('Running useEffect');
        let unmounted = false;
        let source = axios.CancelToken.source();

        getData({
            cancelToken: source.token
        })
            .then(res => {
                if (!unmounted) {
                    setLoading(false);
                    setData(res);
                    console.log('Resolved normally');
                } else {
                    console.log('Resolved after unmount');
                }
            })
            .catch(e => {
                if (!unmounted) {
                    setLoading(false);
                    setError(e);
                    if (axios.isCancel(e)) {
                        console.log(`request cancelled:${e.message}`);
                    } else {
                        console.log('another error happened:' + e.message);
                    }
                } else {
                    console.log(e);
                    console.log('Resolved after unmount ERR');
                }
            });

        return () => {
            unmounted = true;
            console.log("cleanup cancel")
            source.cancel();
        };
    }, []);

    return { data, isLoading, error };
};

export default useAxiosEffect;