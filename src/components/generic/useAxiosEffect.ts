import { DependencyList, useEffect, useState } from 'react';
import axios, { AxiosError, AxiosRequestConfig } from 'axios';

type GetFunction<T> = (options?: AxiosRequestConfig) => Promise<T>;
type DependenciesType = DependencyList | undefined;

const useAxiosEffect = <T>(getData: GetFunction<T>, deps: DependenciesType) => {
    const [data, setData] = useState<T>();
    const [error, setError] = useState<AxiosError>();
    const [isLoading, setLoading] = useState(true);

    useEffect(() => {
        let unmounted = false;
        let source = axios.CancelToken.source();

        getData({
            cancelToken: source.token
        })
            .then(res => {
                if (!unmounted) {
                    setLoading(false);
                    setData(res);
                }
            })
            .catch(e => {
                if (!unmounted) {
                    setLoading(false);
                    setError(e);
                }
            });

        return () => {
            unmounted = true;
            source.cancel();
        };
    }, deps);

    return { data, isLoading, error };
};

export default useAxiosEffect;