import React, { PropsWithChildren } from 'react';
import { AxiosError } from 'axios';
import { LoadingComponent } from './loadingComponent';
import { ErrorComponent } from './errorComponent';

export interface IStateHandlerData<T> {
    isLoading: boolean;
    error: AxiosError | undefined;
    data: T | undefined;
}

interface StateHandlerInterface<T> {
    state: IStateHandlerData<T>;
}

export const ComponentStateHandler = ({
    children,
    state: { error, isLoading, data }
}: PropsWithChildren<StateHandlerInterface<any>>) => {
    if (isLoading) {
        return <LoadingComponent />;
    }

    if (error || data === undefined) {
        return <ErrorComponent desc={error?.message} />;
    }

    return <>{children}</>;
};

export const aggregateState = (
    loading: boolean[],
    data: any[],
    errors: (AxiosError | undefined)[]
): IStateHandlerData<any> => {
    const mergeErrors = (): AxiosError | undefined => {
        const validErrors = errors.filter((e) => e !== undefined) as AxiosError[];

        if (validErrors.length == 0) {
            return undefined;
        }
        const err = validErrors[0] as AxiosError;
        err.message = validErrors.map((e) => e.message).join('\n');
        return err;
    };

    return {
        isLoading: loading.includes(true),
        data: data.some((v) => v === undefined) ? undefined : {},
        error: mergeErrors()
    };
};
