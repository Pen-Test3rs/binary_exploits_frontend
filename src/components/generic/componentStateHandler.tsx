import React, { PropsWithChildren } from 'react';
import { AxiosError, AxiosRequestConfig } from 'axios';
import { LoadingComponent } from './loadingComponent';
import { ErrorComponent } from './errorComponent';

export interface IStateHandlerData<T> {
    isLoading: boolean;
    error: AxiosError | undefined;
    data: T | undefined;
}

interface StateHandlerInterface<T> {
    state: IStateHandlerData<T>;
}

export const ComponentStateHandler = ({
    children,
    state: { error, isLoading, data }
}: PropsWithChildren<StateHandlerInterface<any>>) => {
    if (isLoading) {
        return <LoadingComponent />;
    }

    if (error || data === undefined) {
        return <ErrorComponent desc={error?.message} />;
    }

    return <>{children}</>;
};

export const getAggregatedState = <T extends any[]>(
    ...funcs: ((this: AxiosRequestConfig | undefined) => Promise<any>)[]
): ((o: AxiosRequestConfig | undefined) => Promise<T>) => {
    return (options?: AxiosRequestConfig) => {
        return Promise.all(funcs.map((f) => f.apply(options))) as Promise<T>;
    };
};
