import React, { useRef } from 'react';
import { useForm } from 'react-hook-form';
import { RegisterData } from '../../models/registerData';
import { formTexts } from '../shared/form/formTexts';
import FormInputField from '../shared/form/formInputField';
import FormHeaderComponent from '../shared/form/formHeader';
import SubmitButton from '../shared/form/submitButton';

interface RegisterFormProps {
    loading: boolean;
    onSubmit: (data: RegisterData) => void;
}

const RegisterForm = ({ loading, onSubmit }: RegisterFormProps) => {
    const {
        register,
        handleSubmit,
        watch,
        formState: { errors }
    } = useForm<RegisterData>({ mode: 'onChange' });

    const password = useRef({});
    password.current = watch('password', '');

    return (
        <div className="flex items-center justify-center">
            <div className="max-w-md w-full">
                <FormHeaderComponent
                    mainText={'Zarejestruj się'}
                    smallText={'Masz już konto? '}
                    link={'/login'}
                    linkText={'Zaloguj się!'}
                />

                <form className="mt-8 space-y-2" onSubmit={handleSubmit(onSubmit)} method="POST">
                    <FormInputField
                        placeholder={'Nazwa użytkownika'}
                        errors={errors?.username}
                        registerOpts={register('username', {
                            required: formTexts.requiredField,
                            minLength: {
                                value: 3,
                                message: formTexts.textTooShort
                            }
                        })}
                        additionalStyles={'rounded-t-md'}
                    />

                    <FormInputField
                        placeholder={'Email'}
                        errors={errors?.email}
                        registerOpts={register('email', {
                            required: formTexts.requiredField,
                            pattern: {
                                value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$/i,
                                message: formTexts.invalidEmail
                            }
                        })}
                    />

                    <FormInputField
                        type={'password'}
                        placeholder={'Hasło'}
                        errors={errors?.password}
                        registerOpts={register('password', {
                            required: formTexts.requiredField,
                            minLength: {
                                value: 8,
                                message: formTexts.passwordTooShort
                            }
                        })}
                    />

                    <FormInputField
                        type={'password'}
                        placeholder={'Powtórz hasło'}
                        errors={errors?.passwordConfirmation}
                        registerOpts={register('passwordConfirmation', {
                            required: formTexts.requiredField,
                            minLength: {
                                value: 8,
                                message: formTexts.passwordTooShort
                            },
                            validate: (value: string) => value === password.current || formTexts.passwordsDontMatch
                        })}
                        additionalStyles={'rounded-b-md'}
                    />

                    <SubmitButton loading={loading} loadingText={'Rejestrowanie...'} text={'Zarejestruj się'} />
                </form>
            </div>
        </div>
    );
};

export default RegisterForm;
