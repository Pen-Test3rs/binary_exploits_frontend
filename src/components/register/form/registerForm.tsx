import RegisterFormHeader from './registerFormHeader';
import RegisterFormSubmitButton from './registerFormSubmitButton';
import React, { useRef } from 'react';
import { useForm } from 'react-hook-form';
import { RegisterData } from '../../../models/registerData';
import { formTexts } from '../../shared/form/formTexts';
import FormInputField from '../../shared/form/formInputField';

interface RegisterFormProps {
    loading: boolean;
    onSubmit: (data: RegisterData) => void;
}

const RegisterForm = ({ loading, onSubmit }: RegisterFormProps) => {
    const {
        register,
        handleSubmit,
        watch,
        formState: { errors }
    } = useForm<RegisterData>({ mode: 'onChange' });

    const password = useRef({});
    password.current = watch('password', '');

    return (
        <div className="flex items-center justify-center">
            <div className="max-w-md w-full">
                <RegisterFormHeader />
                <form className="mt-8 space-y-6" onSubmit={handleSubmit(onSubmit)} method="POST">
                    <div className="rounded-md shadow-sm space-y-2">
                        <FormInputField
                            id={'username'}
                            type={'text'}
                            placeholder={'Nazwa użytkownika'}
                            errors={errors?.username}
                            registerOpts={register('username', {
                                required: formTexts.requiredField,
                                minLength: {
                                    value: 3,
                                    message: formTexts.textTooShort
                                }
                            })}
                            additionalStyles={'rounded-t-md'}
                        />

                        <FormInputField
                            id={'email'}
                            type={'text'}
                            placeholder={'Email'}
                            errors={errors?.email}
                            registerOpts={register('email', {
                                required: formTexts.requiredField,
                                pattern: {
                                    value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$/i,
                                    message: formTexts.invalidEmail
                                }
                            })}
                        />

                        <FormInputField
                            id={'password'}
                            type={'password'}
                            placeholder={'Hasło'}
                            errors={errors?.password}
                            registerOpts={register('password', {
                                required: formTexts.requiredField,
                                minLength: {
                                    value: 8,
                                    message: formTexts.passwordTooShort
                                }
                            })}
                        />

                        <FormInputField
                            id={'passwordConfirmation'}
                            type={'password'}
                            placeholder={'Powtórz hasło'}
                            errors={errors?.passwordConfirmation}
                            registerOpts={register('passwordConfirmation', {
                                required: formTexts.requiredField,
                                minLength: {
                                    value: 8,
                                    message: formTexts.passwordTooShort
                                },
                                validate: (value: string) => value === password.current || formTexts.passwordsDontMatch
                            })}
                            additionalStyles={'rounded-b-md'}
                        />
                    </div>

                    <RegisterFormSubmitButton loading={loading} />
                </form>
            </div>
        </div>
    );
};

export default RegisterForm;
