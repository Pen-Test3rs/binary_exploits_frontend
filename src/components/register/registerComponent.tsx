import React, { useState } from 'react';
import { authService } from '../../services/authService';
import RegisterForm from './registerForm';
import { useToasts } from 'react-toast-notifications';
import { useAppDispatch } from '../../context/hooks';
import { useHistory } from 'react-router-dom';
import { registerFailure, registerSuccess } from '../../context/userReducer';
import { User } from '../../models/user';
import { formTexts } from '../shared/form/formTexts';
import { AxiosError } from 'axios';
import { RegisterData } from '../../models/formData';

const RegisterComponent = () => {
    const [loading, setLoading] = useState(false);
    const [errors, setErrors] = useState({});
    const { addToast } = useToasts();
    const history = useHistory();
    const dispatch = useAppDispatch();

    const registeredCallback = (user: User) => {
        setLoading(false);
        dispatch(registerSuccess(user));
        history.push('/dashboard');
    };

    const errorCallback = (e: AxiosError) => {
        setLoading(false);
        dispatch(registerFailure());

        const err = e.response?.data;
        if (err) {
            const errorMap = {
                username: err?.username?.slice(0, 1),
                email: err?.email?.slice(0, 1)
            };
            setErrors(errorMap);
        } else {
            setErrors({});
            addToast(formTexts.genericError, {
                appearance: 'error'
            });
        }
    };

    const onSubmit = (data: RegisterData) => {
        if (loading) {
            return;
        }

        setLoading(true);
        authService.register(data).then(registeredCallback).catch(errorCallback);
    };

    return <RegisterForm loading={loading} backendErrors={errors} onSubmit={onSubmit} />;
};

export default RegisterComponent;
