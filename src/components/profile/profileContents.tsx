import formatDate from '../../utils/dateFormatter';
import React from 'react';
import { UserData } from '../../models/user';
import { useAppSelector } from '../../context/hooks';
import { currentUserData } from '../../context/userReducer';
import { FaChartLine, FaCheck } from 'react-icons/fa';
import RecentlySolvedListRenderer, { EmptySadFace } from './recentlySolvedListRenderer';
import CardLineChart from '../charts/cardLineChart';
import { prepareChartData } from '../charts/prepareChartData';
import { Rating } from '../../models/dashboard';

const mapUserDataToRating = (userData: UserData): Rating[] => {
    return [
        {
            id: userData.id,
            username: userData.username,
            points: userData.points,
            solved: userData.solved,
            place: userData.place,
            last_solved: userData.solutions
                .map((solution) => {
                    return { date: solution.date, points: solution.task.points };
                })
                .concat({ date: userData.date_joined, points: 0 })
        }
    ];
};

interface ProfileContentsProps {
    userData: UserData;
}

const ProfileContents = ({ userData }: ProfileContentsProps) => {
    const user = useAppSelector(currentUserData);
    const isOwnProfile = userData.id === user.id;
    const data = prepareChartData(mapUserDataToRating(userData));

    const labelComponent = (left: string, right: string | number) => {
        return (
            <li className="inline-flex">
                <span className="font-bold mr-1"> {left}</span>
                {right}
            </li>
        );
    };

    const email = () => {
        return (
            <div className="flex flex-row justify-center items-center">
                <span className="text-center text-sm">{user.email}</span>
            </div>
        );
    };

    return (
        <div className="bg-white shadow-xl rounded pb-6">
            <div className="flex flex-col justify-center items-center my-4">
                <h1 className="flex flex-row text-center">{userData.username} </h1>
                {isOwnProfile && email()}
            </div>

            <div className="flex flex-row flex-wrap w-full">
                <div className="flex flex-col lg:w-4/12 mx-auto my-6 pl-4">
                    <h3 className="flex items-center justify-center space-x-2 mb-4 w-full">
                        <span>Ostatnio rozwiązane</span>
                        <FaCheck />
                    </h3>

                    <RecentlySolvedListRenderer solves={userData.solutions} viewingOwn={isOwnProfile} />
                </div>

                <div className="flex flex-col lg:w-8/12 mx-auto my-6 w-full">
                    <h3 className="flex justify-center items-center space-x-3 mb-4">
                        <span>Postępy w czasie</span>
                        <FaChartLine />
                    </h3>
                    <div className="mx-5 mb-4">
                        {userData.solved ? <CardLineChart ratingData={data} height={'h-96'} /> : <EmptySadFace />}
                    </div>
                    <ul className="mx-10 list-none pl-0 flex flex-wrap justify-between items-center">
                        {labelComponent('Ranking:', userData.place)}
                        {labelComponent('Punkty:', userData.points)}
                        {labelComponent('Rozwiązane zadania:', userData.solutions.length)}
                        {labelComponent('Data dołączenia:', formatDate(userData.date_joined))}
                    </ul>
                </div>
            </div>
        </div>
    );
};

export default ProfileContents;
