import { Redirect, Route, RouteProps } from 'react-router-dom';
import { useAppSelector } from '../../context/hooks';
import { isLoggedIn } from '../../context/userReducer';
import { useToasts } from 'react-toast-notifications';

export type ProtectedRouteProps = {
    redirectPath: string;
    redirectText?: string;
    reverse?: boolean;
} & RouteProps;

/*
| logged | reverse | allow |
| -------------------------|
|    0   |    0    |   0   |
|    0   |    1    |   1   |
|    1   |    0    |   1   |
|    1   |    1    |   0   |
----------------------------
 */

const PrivateRoute = ({ redirectPath, redirectText = '', reverse = false, ...routeProps }: ProtectedRouteProps) => {
    const logged = useAppSelector(isLoggedIn);
    const { addToast } = useToasts();

    if (logged === reverse) {
        if (redirectText.length > 1) {
            addToast(redirectText, {
                appearance: 'error'
            });
        }

        console.log('Redirect');
        return <Redirect to={{ pathname: redirectPath }} />;
    }

    console.log('Route');
    return <Route {...routeProps} />;
};

export default PrivateRoute;
