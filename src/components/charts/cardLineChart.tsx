import { useEffect, useRef } from 'react';
import {
    CategoryScale,
    Chart,
    Legend,
    LinearScale,
    LineController,
    LineElement,
    PointElement,
    TimeScale,
    Title,
    Tooltip
} from 'chart.js';
import 'chartjs-adapter-date-fns';
import { getConfig } from './lineChartConfig';
import { Rating } from '../../models/dashboard';

Chart.register(
    LineController,
    LineElement,
    LinearScale,
    Title,
    CategoryScale,
    PointElement,
    Legend,
    Tooltip,
    TimeScale
);

interface ChartLineProps {
    ratingData: Rating[];
    displayLegend?: boolean;
    className: string;
}

const colors = [
    '#41658a',
    '#B80C09',
    '#98CE00',
    '#FFD447',
    '#7b0828',
    '#ccccff',
    '#0f0e0e',
    '#FF9B85',
    '#5E4AE3',
    '#40e0d0'
];

const CardLineChart = ({ ratingData, displayLegend = false, className }: ChartLineProps) => {
    const chartContainer = useRef<HTMLCanvasElement>(null);

    useEffect(() => {
        if (!chartContainer.current) {
            return;
        }

        const datasets = ratingData?.map((d, i) => {
            return {
                label: d.username,
                backgroundColor: colors[i % colors.length],
                borderColor: colors[i % colors.length],
                data: d.last_solved,
                fill: false
            };
        });

        let ctx = chartContainer.current.getContext('2d');
        const chart = new Chart(ctx!, getConfig(datasets, displayLegend));

        return () => chart.destroy();
    }, [ratingData, displayLegend]);

    return (
        <div className={`bg-gray-1 relative flex flex-col min-w-0 break-words w-full p-4 ${className}`}>
            <canvas ref={chartContainer} className="h-full" />
        </div>
    );
};

export default CardLineChart;
