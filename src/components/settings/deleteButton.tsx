import React, { PropsWithChildren, useState } from 'react';
import RedButton from '../styled-components/settings/redButton';
import Modal from 'react-modal';
import XIcon from '../shared/modal/x-icon';
import { useForm } from 'react-hook-form';
import FormHeaderComponent from '../shared/form/formHeader';
import FormInputField from '../shared/form/formInputField';
import { formTexts } from '../shared/form/formTexts';
import SubmitButton from '../shared/form/submitButton';
import { deleteUser } from '../../context/userReducer';
import { AxiosError } from 'axios';
import { profileService } from '../../services/profileService';
import { useHistory } from 'react-router-dom';
import { useAppDispatch } from '../../context/hooks';
import { useToasts } from 'react-toast-notifications';
import { handleBackendErrors } from '../shared/form/backendErrorHandler';
import { DeleteAccountData } from '../../models/formData';

interface DeleteButtonProps {}

const DeleteAccountButton = (props: PropsWithChildren<DeleteButtonProps>) => {
    const [loading, setLoading] = useState(false);
    const [modalIsOpen, setModalIsOpen] = useState(false);
    const history = useHistory();
    const dispatch = useAppDispatch();
    const { addToast } = useToasts();
    const [backendErrors, setBackendErrors] = useState<Record<string, string | undefined>>({});

    const {
        register,
        handleSubmit,
        setError,
        reset,
        formState: { errors }
    } = useForm<DeleteAccountData>({ mode: 'all' });

    const showModal = () => {
        setModalIsOpen(true);
    };

    const closeModal = () => {
        reset();
        setModalIsOpen(false);
    };

    const handleErrors = (field: string) => handleBackendErrors<DeleteAccountData>(field, backendErrors, setError);

    const deletedCallback = () => {
        setLoading(false);

        history.push('/');
        addToast(formTexts.accountDeleted, {
            appearance: 'success'
        });
        dispatch(deleteUser());
    };

    const errorCallback = (e: AxiosError) => {
        setLoading(false);

        const err = e.response?.data;
        if (err) {
            setBackendErrors({
                password: err?.password
            });
        } else {
            setBackendErrors({});
            addToast(formTexts.genericError, {
                appearance: 'error'
            });
        }
    };

    const onSubmit = (data: DeleteAccountData) => {
        if (loading) {
            return;
        }

        setLoading(true);
        profileService.delete(data).then(deletedCallback).catch(errorCallback);
    };

    return (
        <>
            <RedButton type="button" onClick={showModal}>
                {props.children}
            </RedButton>
            <Modal
                isOpen={modalIsOpen}
                shouldCloseOnEsc={true}
                shouldCloseOnOverlayClick={true}
                ariaHideApp={false}
                onRequestClose={closeModal}
                parentSelector={() => document.getElementById('settingsForm') as HTMLElement}
                overlayClassName="fixed inset-0 w-full h-full bg-gray-300 flex justify-center items-center bg-opacity-75"
                className="py-5 absolute bg-white overflow-auto w-11/12 max-h-full md:w-4/6 lg:w-1/2 shadow rounded focus:outline-none"
            >
                <button
                    type="button"
                    onClick={closeModal}
                    className="absolute right-4 top-5 focus:outline-none opacity-30"
                >
                    <XIcon />
                </button>

                <div className="flex flex-col items-center justify-center">
                    <FormHeaderComponent mainText={'Czy jesteś pewien?'} />

                    <form
                        id="settingsForm"
                        className="mt-2 grid grid-cols-2 gap-3"
                        onSubmit={handleSubmit(onSubmit)}
                        method="POST"
                    >
                        <div className="text-right mt-2">Wprowadź aktualne hasło:</div>
                        <div className="">
                            <FormInputField
                                type={'password'}
                                placeholder={'Aktualne hasło'}
                                errors={errors?.password || handleErrors('password')}
                                registerOpts={register('password', {
                                    required: formTexts.requiredField
                                })}
                            />
                        </div>

                        <div className="mx-2">
                            <SubmitButton loading={loading} loadingText={'Usuwam...'} text={'Potwierdź'} />
                        </div>
                        <div className="mx-2">
                            <RedButton onClick={closeModal}>Anuluj</RedButton>
                        </div>
                    </form>
                </div>
            </Modal>
        </>
    );
};

export default DeleteAccountButton;
