import React, { PropsWithChildren, useState } from 'react';
import RedButton from '../styled-components/settings/redButton';
import Modal from 'react-modal';
import XIcon from '../shared/modal/x-icon';
import { FieldError, FieldName, useForm } from 'react-hook-form';
import FormHeaderComponent from '../shared/form/formHeader';
import FormInputField from '../shared/form/formInputField';
import { formTexts } from '../shared/form/formTexts';
import SubmitButton from '../shared/form/submitButton';
import { deleteUser } from '../../context/userReducer';
import { AxiosError } from 'axios';
import { profileService } from '../../services/profileService';
import { useHistory } from 'react-router-dom';
import { useAppDispatch } from '../../context/hooks';
import { useToasts } from 'react-toast-notifications';
import { DeleteAccountData } from '../../models/deleteAccountData';

interface DeleteButtonProps {}

const DeleteAccountButton = (props: PropsWithChildren<DeleteButtonProps>) => {
    const [loading, setLoading] = useState(false);
    const [modalIsOpen, setModalIsOpen] = useState(false);
    const history = useHistory();
    const dispatch = useAppDispatch();
    const { addToast } = useToasts();
    const [backendErrors, setBackendErrors] = useState<Record<string, string | undefined>>({});

    const {
        register,
        handleSubmit,
        setError,
        reset,
        formState: { errors }
    } = useForm<DeleteAccountData>({ mode: 'all' });

    const showModal = () => {
        setModalIsOpen(true);
    };

    const closeModal = () => {
        reset();
        setModalIsOpen(false);
    };

    const handleBackendErrors = (field: string): FieldError | undefined => {
        const message = backendErrors[field];
        if (message === undefined) {
            return undefined;
        }

        const err: FieldError = {
            type: 'server',
            message: message
        };

        setError(field as FieldName<DeleteAccountData>, err);
        backendErrors[field] = undefined;
    };

    const deletedCallback = () => {
        setLoading(false);

        history.push('/');
        addToast(formTexts.accountDeleted, {
            appearance: 'success'
        });
        dispatch(deleteUser());
    };

    const errorCallback = (e: AxiosError) => {
        setLoading(false);

        const err = e.response?.data;
        if (err) {
            const errorMap = {
                password: err?.password
            };
            setBackendErrors(errorMap);
        } else {
            setBackendErrors({});
            addToast(formTexts.genericError, {
                appearance: 'error'
            });
        }
    };

    const onSubmit = (data: DeleteAccountData) => {
        if (loading) {
            return;
        }

        setLoading(true);
        profileService.delete(data).then(deletedCallback).catch(errorCallback);
    };

    return (
        <>
            <RedButton type="button" onClick={showModal}>
                {props.children}
            </RedButton>
            <Modal
                isOpen={modalIsOpen}
                shouldCloseOnEsc={true}
                shouldCloseOnOverlayClick={true}
                ariaHideApp={false}
                onRequestClose={closeModal}
                parentSelector={() => document.getElementById('settingsForm') as HTMLElement}
                overlayClassName="fixed inset-0 w-full h-full bg-gray-300 flex justify-center items-center bg-opacity-75"
                className="py-5 absolute bg-white overflow-auto w-1/2 shadow rounded focus:outline-none" //todo: tailwind styles
            >
                <button
                    type="button"
                    onClick={closeModal}
                    className="absolute right-4 top-5 focus:outline-none opacity-30"
                >
                    <XIcon />
                </button>

                <div className="flex items-center justify-center">
                    <div className="max-w-md w-full mt-6">
                        <FormHeaderComponent mainText={'Czy jesteś pewien?'} />

                        <form
                            id="settingsForm"
                            className="mt-8 grid grid-cols-3 gap-3"
                            onSubmit={handleSubmit(onSubmit)}
                            method="POST"
                        >
                            <div className="text-right mt-2">Aktualne hasło:</div>
                            <div className="col-span-2">
                                <FormInputField
                                    type={'password'}
                                    placeholder={'Aktualne hasło'}
                                    errors={errors?.password || handleBackendErrors('password')}
                                    registerOpts={register('password', {
                                        required: formTexts.requiredField
                                    })}
                                />
                            </div>

                            <div className="mt-5" />
                            <SubmitButton loading={loading} loadingText={'Usuwam...'} text={'Potwierdź'} />
                            <RedButton onClick={closeModal}>Anuluj</RedButton>
                        </form>
                    </div>
                </div>
            </Modal>
        </>
    );
};

export default DeleteAccountButton;
