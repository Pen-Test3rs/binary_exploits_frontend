import React, { useRef } from 'react';
import { useForm } from 'react-hook-form';
import { formTexts } from '../shared/form/formTexts';
import FormInputField from '../shared/form/formInputField';
import FormHeaderComponent from '../shared/form/formHeader';
import SubmitButton from '../shared/form/submitButton';
import { useAppSelector } from '../../context/hooks';
import { currentUserData } from '../../context/userReducer';
import DeleteAccountButton from './deleteButton';
import { handleBackendErrors } from '../shared/form/backendErrorHandler';
import { SettingsData } from '../../models/formData';

interface RegisterFormProps {
    loading: boolean;
    onSubmit: (data: SettingsData) => void;
    backendErrors: Record<string, string | undefined>;
}

const SettingsForm = ({ loading, backendErrors, onSubmit }: RegisterFormProps) => {
    const user = useAppSelector(currentUserData);
    const {
        register,
        handleSubmit,
        watch,
        setError,
        formState: { errors }
    } = useForm<SettingsData>({ mode: 'all' });

    const handleErrors = (field: string) => handleBackendErrors<SettingsData>(field, backendErrors, setError);

    const newPassword = useRef({});
    const newEmail = useRef({});
    newPassword.current = watch('newPassword', '');
    newEmail.current = watch('email', '');

    return (
        <div className="flex flex-col items-center justify-center bg-white max-w-2xl mx-auto md:rounded p-5 w-full">
            <FormHeaderComponent mainText={'Ustawienia'} />

            <form
                id="settingsForm"
                className="mt-8 w-full grid grid-cols-2 gap-2"
                onSubmit={handleSubmit(onSubmit)}
                method="POST"
            >
                <div className="my-auto">Obecny adres email: </div>
                <div>{user.email}</div>

                <div className="flex my-auto text-right mr-2">Nowy adres email:</div>
                <FormInputField
                    placeholder="Adres email"
                    errors={errors?.email || handleErrors('email')}
                    registerOpts={register('email', {
                        pattern: {
                            value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$/i,
                            message: formTexts.invalidEmail
                        }
                    })}
                />

                <div className="my-auto">Nowe hasło:</div>
                <FormInputField
                    type={'password'}
                    placeholder={'Nowe hasło'}
                    errors={errors?.newPassword}
                    registerOpts={register('newPassword', {
                        minLength: {
                            value: 8,
                            message: formTexts.passwordTooShort
                        }
                    })}
                />

                <div className="my-auto">Powtórz hasło:</div>
                <FormInputField
                    type={'password'}
                    placeholder={'Powtórz nowe hasło'}
                    errors={errors?.passwordConfirmation}
                    registerOpts={register('passwordConfirmation', {
                        validate: (value: string) => value === newPassword.current || formTexts.passwordsDontMatch
                    })}
                />

                <div className="my-auto">Potwierdź zmianę: </div>
                <FormInputField
                    type={'password'}
                    placeholder={'Aktualne hasło'}
                    errors={errors?.oldPassword || handleErrors('oldPassword')}
                    registerOpts={register('oldPassword', {
                        required: formTexts.requiredField,
                        validate: (value: string) => {
                            return (
                                newPassword.current.toString().length > 0 ||
                                newEmail.current.toString().length > 0 ||
                                'Przynajmniej jedno pole musi być wypełnione'
                            );
                        }
                    })}
                    additionalStyles={'mt-5'}
                />
                <div className="mx-auto w-1/4 col-span-2">
                    <SubmitButton loading={loading} loadingText={'Aktualizuję...'} text={'Zatwierdź'} />
                </div>
            </form>
            <div className="mt-16">
                <DeleteAccountButton>Usuń konto</DeleteAccountButton>
            </div>
        </div>
    );
};

export default SettingsForm;
