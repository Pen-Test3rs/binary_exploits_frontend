import React, { useRef } from 'react';
import { useForm } from 'react-hook-form';
import { formTexts } from '../shared/form/formTexts';
import FormInputField from '../shared/form/formInputField';
import FormHeaderComponent from '../shared/form/formHeader';
import SubmitButton from '../shared/form/submitButton';
import { useAppSelector } from '../../context/hooks';
import { currentUserData } from '../../context/userReducer';
import DeleteAccountButton from './deleteButton';
import { handleBackendErrors } from '../shared/form/backendErrorHandler';
import { SettingsData } from '../../models/formData';

interface RegisterFormProps {
    loading: boolean;
    onSubmit: (data: SettingsData) => void;
    backendErrors: Record<string, string | undefined>;
}

const SettingsForm = ({ loading, backendErrors, onSubmit }: RegisterFormProps) => {
    const user = useAppSelector(currentUserData);
    const {
        register,
        handleSubmit,
        watch,
        setError,
        formState: { errors }
    } = useForm<SettingsData>({ mode: 'all' });

    const handleErrors = (field: string) => handleBackendErrors<SettingsData>(field, backendErrors, setError);

    const newPassword = useRef({});
    const newEmail = useRef({});
    newPassword.current = watch('newPassword', '');
    newEmail.current = watch('email', '');

    return (
        <div className="flex items-center justify-center bg-white max-w-4xl mx-auto w-full rounded flex flex-col pb-5">
            <FormHeaderComponent mainText={'Ustawienia'} />

            <form id="settingsForm" className="mt-8 w-full" onSubmit={handleSubmit(onSubmit)} method="POST">
                <div className="flex flex-row">
                    <div className="w-full  max-w-xl">Nowy adres email:</div>
                    <FormInputField
                        placeholder={user.email}
                        errors={errors?.email || handleErrors('email')}
                        registerOpts={register('email', {
                            pattern: {
                                value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$/i,
                                message: formTexts.invalidEmail
                            }
                        })}
                    />
                </div>

                <div className="flex flex-row">
                    <div className="">Nowe hasło:</div>
                    <FormInputField
                        type={'password'}
                        placeholder={'Nowe hasło'}
                        errors={errors?.newPassword}
                        registerOpts={register('newPassword', {
                            minLength: {
                                value: 8,
                                message: formTexts.passwordTooShort
                            }
                        })}
                    />
                </div>

                <div className="flex flex-row">
                    <div className="">Powtórz hasło:</div>
                    <FormInputField
                        type={'password'}
                        placeholder={'Powtórz nowe hasło'}
                        errors={errors?.passwordConfirmation}
                        registerOpts={register('passwordConfirmation', {
                            validate: (value: string) => value === newPassword.current || formTexts.passwordsDontMatch
                        })}
                    />
                </div>

                <div className="flex flex-row">
                    <div className="">Aktualne hasło:</div>
                    <FormInputField
                        type={'password'}
                        placeholder={'Aktualne hasło'}
                        errors={errors?.oldPassword || handleErrors('oldPassword')}
                        registerOpts={register('oldPassword', {
                            required: formTexts.requiredField,
                            validate: (value: string) => {
                                return (
                                    newPassword.current.toString().length > 0 ||
                                    newEmail.current.toString().length > 0 ||
                                    'Formularz nie może być pusty'
                                );
                            }
                        })}
                        additionalStyles={'mt-8'}
                    />
                </div>

                <div className="flex flex-row mt-5">
                    <div className="mx-auto mt-5">
                        <SubmitButton loading={loading} loadingText={'Aktualizuję...'} text={'Zatwierdź'} />
                    </div>
                    <div className="mx-auto mt-5">
                        <DeleteAccountButton>Usuń konto</DeleteAccountButton>
                    </div>
                </div>
            </form>
        </div>
    );
};

export default SettingsForm;
