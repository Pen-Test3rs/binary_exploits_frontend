import React, { useRef } from 'react';
import { useForm } from 'react-hook-form';
import { formTexts } from '../shared/form/formTexts';
import FormInputField from '../shared/form/formInputField';
import FormHeaderComponent from '../shared/form/formHeader';
import SubmitButton from '../shared/form/submitButton';
import { SettingsData } from '../../models/settingsData';
import { useAppSelector } from '../../context/hooks';
import { currentUserData } from '../../context/userReducer';
import DeleteAccountButton from './deleteButton';
import { handleBackendErrors } from '../shared/form/backendErrorHandler';

interface RegisterFormProps {
    loading: boolean;
    onSubmit: (data: SettingsData) => void;
    backendErrors: Record<string, string | undefined>;
}

const SettingsForm = ({ loading, backendErrors, onSubmit }: RegisterFormProps) => {
    const user = useAppSelector(currentUserData);
    const {
        register,
        handleSubmit,
        watch,
        setError,
        formState: { errors }
    } = useForm<SettingsData>({ mode: 'all' });

    const handleErrors = (field: string) => handleBackendErrors<SettingsData>(field, backendErrors, setError);

    const newPassword = useRef({});
    const newEmail = useRef({});
    newPassword.current = watch('newPassword', '');
    newEmail.current = watch('email', '');

    return (
        <div className="flex items-center justify-center">
            <div className="max-w-md w-full mt-6">
                <FormHeaderComponent mainText={`${user.username}`} />

                <form
                    id="settingsForm"
                    className="mt-8 grid grid-cols-3 gap-3"
                    onSubmit={handleSubmit(onSubmit)}
                    method="POST"
                >
                    <div className="text-right mt-2">Adres email:</div>
                    <div className="col-span-2">
                        <FormInputField
                            placeholder={'Nowy email'}
                            errors={errors?.email || handleErrors('email')}
                            registerOpts={register('email', {
                                pattern: {
                                    value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$/i,
                                    message: formTexts.invalidEmail
                                }
                            })}
                        />
                    </div>

                    <div className="text-right mt-2">Nowe hasło:</div>
                    <div className="col-span-2">
                        <FormInputField
                            type={'password'}
                            placeholder={'Nowe hasło'}
                            errors={errors?.newPassword}
                            registerOpts={register('newPassword', {
                                minLength: {
                                    value: 8,
                                    message: formTexts.passwordTooShort
                                }
                            })}
                        />
                    </div>

                    <div className="mt-2" />
                    <div className="col-span-2">
                        <FormInputField
                            type={'password'}
                            placeholder={'Powtórz nowe hasło'}
                            errors={errors?.passwordConfirmation}
                            registerOpts={register('passwordConfirmation', {
                                validate: (value: string) =>
                                    value === newPassword.current || formTexts.passwordsDontMatch
                            })}
                        />
                    </div>

                    <div className="text-right mt-10">Aktualne hasło:</div>
                    <div className="col-span-2">
                        <FormInputField
                            type={'password'}
                            placeholder={'Aktualne hasło'}
                            errors={errors?.oldPassword || handleErrors('oldPassword')}
                            registerOpts={register('oldPassword', {
                                required: formTexts.requiredField,
                                validate: (value: string) => {
                                    return (
                                        newPassword.current.toString().length > 0 ||
                                        newEmail.current.toString().length > 0 ||
                                        'Formularz nie może być pusty'
                                    );
                                }
                            })}
                            additionalStyles={'mt-8'}
                        />
                    </div>

                    <div className="mt-5" />
                    <div className="mx-auto mt-5">
                        <SubmitButton loading={loading} loadingText={'Aktualizuję...'} text={'Zatwierdź'} />
                    </div>
                    <div className="mx-auto mt-5">
                        <DeleteAccountButton>Usuń konto</DeleteAccountButton>
                    </div>
                </form>
            </div>
        </div>
    );
};

export default SettingsForm;
