import React, { useEffect, useState } from 'react';

import { Remarkable } from 'remarkable';
import RemarkableReactRenderer from 'remarkable-react';
import { Headers } from '../remarkable-components/headers';
import pre from '../remarkable-components/pre';
import code from '../remarkable-components/code';
import { RouteComponentProps } from 'react-router-dom';
import { articlesService } from '../../services/articlesService';
import { Article } from '../../models/article';
import LoadingSpinner from '../spinner/loadingSpinner';

type TParams = { id: string };

const SingleArticleContent = ({ match }: RouteComponentProps<TParams>) => {
    const id = match.params.id;
    const [article, setArticle] = useState<Article>();
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        articlesService
            .getOne(id)
            .then((res) => {
                console.log(res);
                setArticle(res);
            })
            .catch((err) => {
                //TODO: handle error
                console.error(err);
            })
            .finally(() => setLoading(false));
    }, []);

    const md = new Remarkable(); //TODO: should we put it outside the component?
    md.renderer = new RemarkableReactRenderer({
        components: {
            // a: Component,
            // blockquote: Component,
            // br: Component,
            code: code,
            // del: Component,
            h1: Headers.h1,
            h2: Headers.h2,
            h3: Headers.h3,
            h4: Headers.h4,
            h5: Headers.h5,
            h6: Headers.h6,
            // html: Component,
            // img: Component,
            // ins: Component,
            // li: Component,
            // mark: Component,
            // ol: Component,
            // p: Component,
            pre: pre
            // sub: Component,
            // sup: Component,
            // table: Component,
            // tbody: Component,
            // td: Component,
            // th: Component,
            // thead: Component,
            // tr: Component,
            // ul: Component
        }
    });
    // return <>{md.render(article.)}</>;
    //TODO: wrapper component for whole article
    return (
        <>
            {loading && <LoadingSpinner />}
            {!loading && md.render(article?.content || '')}
        </>
    );
};

export default SingleArticleContent;
