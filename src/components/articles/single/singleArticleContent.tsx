import React, { useState } from 'react';

import { Article } from '../../../models/article';
import { markdown } from '../../../remarkable/remarkable';
import ArticleContainer from '../../styled-components/articles/ArticleContainer';
import TaskCard from '../../tasks/single/taskCard';
import LinkedTasksContainer from '../../styled-components/articles/LinkedTasksContainer';
import { taskComparator, TaskStatus } from '../../../models/task';
import TaskModal from '../../tasks/single/taskModal';

interface SingleArticleProps {
    article: Article;
}
const statusOrder = [TaskStatus.OK, TaskStatus.BLOCKED, TaskStatus.SOLVED];

const SingleArticleContent = ({ article }: SingleArticleProps) => {
    const [taskId, setTaskId] = useState(0);
    const [modalIsOpen, setModalIsOpen] = useState(false);

    const linkedTasksRenderer = (article: Article) => {
        return (
            <LinkedTasksContainer>
                <TaskModal taskId={taskId} modalIsOpen={modalIsOpen} setModalIsOpen={setModalIsOpen} />
                <h3 className="text-center text-3xl mt-10 mb-4">PowiÄ…zane zadania</h3>
                <div className="grid gap-4 grid-cols-1 md:grid-cols-2 w-full">
                    {article.linked_tasks
                        .sort(
                            (t1, t2) =>
                                statusOrder.indexOf(t1.status) - statusOrder.indexOf(t2.status) ||
                                taskComparator(t1, t2)
                        )
                        .map((task) => {
                            return (
                                <TaskCard
                                    key={task.id}
                                    taskData={task}
                                    setModalIsOpen={setModalIsOpen}
                                    setTaskId={setTaskId}
                                />
                            );
                        })}
                </div>
            </LinkedTasksContainer>
        );
    };

    return (
        <>
            <ArticleContainer>
                <h1 className="text-center text-4xl">{article.name}</h1>
                <div className="markdownContent">{markdown.render(article.content)}</div>
            </ArticleContainer>
            {article.linked_tasks && article.linked_tasks.length > 0 && linkedTasksRenderer(article)}
        </>
    );
};

export default SingleArticleContent;
