import React, { useState } from 'react';
import { Levels } from './levels';
import { TaskCardData } from '../../models/task';
import { Link } from 'react-router-dom';
import Modal from 'react-modal';
import SingleTaskComponent from './singleTaskComponent';
interface exerciseCardProps {
    taskData: TaskCardData;
}

const TaskCard = ({ taskData }: exerciseCardProps) => {
    Modal.setAppElement('#root');
    const taskId = `/tasks/${taskData.id}`;

    let color, levelText;
    switch (taskData.level) {
        case Levels.VeryEasy:
            color = 'bg-green-400';
            levelText = 'Bardzo łatwy';
            break;
        case Levels.Easy:
            color = 'bg-green-600';
            levelText = 'Łatwy';
            break;
        case Levels.Medium:
            color = 'bg-yellow-500';
            levelText = 'Średni';
            break;
        case Levels.Hard:
            color = 'bg-red-500';
            levelText = 'Trudny';
            break;
        case Levels.VeryHard:
            color = 'bg-red-700';
            levelText = 'Bardzo trudny';
            break;
        default:
            break;
    }

    const [modalIsOpen, setModalIsOpen] = useState(false);

    return (
        <div className="flex justify-center w-full md:w-1/2 lg:w-4/12 py-4 px-2">
            <Modal
                isOpen={modalIsOpen}
                shouldCloseOnEsc={true}
                shouldCloseOnOverlayClick={true}
                onRequestClose={() => setModalIsOpen(false)}
                overlayClassName="fixed inset-0 w-full h-full bg-gray-300 flex justify-center items-center bg-opacity-75"
                className="py-5 absolute bg-white overflow-auto h-11/12 w-5/6 md:max-h-4/6 md:w-4/6 lg:w-1/2 shadow rounded focus:outline-none" //todo: tailwind styles
            >
                <button
                    onClick={() => setModalIsOpen(false)}
                    className="absolute right-4 top-5 focus:outline-none opacity-30"
                >
                    <svg
                        className="fill-current text-black"
                        xmlns="http://www.w3.org/2000/svg"
                        width="27"
                        height="27"
                        viewBox="0 0 18 18"
                    >
                        <path d="M14.53 4.53l-1.06-1.06L9 7.94 4.53 3.47 3.47 4.53 7.94 9l-4.47 4.47 1.06 1.06L9 10.06l4.47 4.47 1.06-1.06L10.06 9z" />
                    </svg>
                </button>
                <SingleTaskComponent key={taskData.id} id={String(taskData.id)} />
            </Modal>
            <div
                onClick={() => setModalIsOpen(true)}
                className={`animate-fade-in-down focus:outline-none cursor-pointer ${
                    taskData.status === 'success' ? 'bg-green-100' : 'bg-white'
                } hover:shadow-lg relative shadow p-2 rounded-lg text-gray-800 h-full px-4 py-3 w-full`}
            >
                <div
                    className={`right-0 rounded-l-full absolute text-center font-bold text-xs text-white px-2 py-1 ${color}`}
                >
                    {levelText}
                </div>
                <div className="font-bold font-title text-center">{taskData.title}</div>
                {/*<div className="text-sm font-light text-center my-2">{text}</div>*/}
                <div className="flex flex-wrap mb-0.5 justify-center">
                    <svg
                        xmlns="http://www.w3.org/2000/svg"
                        className="h-4 w-4 text-center"
                        viewBox="0 0 20 20"
                        fill="currentColor"
                    >
                        <path
                            fillRule="evenodd"
                            d="M12.395 2.553a1 1 0 00-1.45-.385c-.345.23-.614.558-.822.88-.214.33-.403.713-.57 1.116-.334.804-.614 1.768-.84 2.734a31.365 31.365 0 00-.613 3.58 2.64 2.64 0 01-.945-1.067c-.328-.68-.398-1.534-.398-2.654A1 1 0 005.05 6.05 6.981 6.981 0 003 11a7 7 0 1011.95-4.95c-.592-.591-.98-.985-1.348-1.467-.363-.476-.724-1.063-1.207-2.03zM12.12 15.12A3 3 0 017 13s.879.5 2.5.5c0-1 .5-4 1.25-4.5.5 1 .786 1.293 1.371 1.879A2.99 2.99 0 0113 13a2.99 2.99 0 01-.879 2.121z"
                            clipRule="evenodd"
                        />
                    </svg>
                    <div className="font-bold text-xs text-center mx-0.5">{taskData.points}</div>
                    <div className="font-serif text-xs text-center mx-0.5">punktów</div>
                </div>
                <div className="mt-2 flex flex-wrap w-full justify-center">
                    {taskData.labels.map((tag, i) => {
                        return (
                            <span
                                key={i}
                                className="m-1 bg-gray-200 hover:bg-gray-300 rounded-full px-2 font-bold text-xs leading-loose cursor-pointer"
                            >
                                #{tag}
                            </span>
                        );
                    })}
                </div>
            </div>
        </div>
    );
};

export default TaskCard;
