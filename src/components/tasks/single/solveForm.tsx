import React from 'react';
import { FieldError, FieldName, useForm } from 'react-hook-form';
import { SolveData } from '../../../models/solveData';
import { formTexts } from '../../shared/form/formTexts';
import FormInputField from '../../shared/form/formInputField';
import SubmitButton from '../../shared/form/submitButton';

interface SolveFormProps {
    loading: boolean;
    onSubmit: (data: SolveData) => void;
    backendErrors: Record<string, string | undefined>;
}

const SolveForm = ({ loading, backendErrors, onSubmit }: SolveFormProps) => {
    const {
        register,
        handleSubmit,
        setError,
        formState: { errors }
    } = useForm<SolveData>({ mode: 'onSubmit' });

    const handleBackendErrors = (field: string): FieldError | undefined => {
        const message = backendErrors[field];
        if (message === undefined) {
            return undefined;
        }

        const err: FieldError = {
            type: 'server',
            message: message
        };

        setError(field as FieldName<SolveData>, err);
        backendErrors[field] = undefined;
    };

    return (
        <div className="w-full mt-6">
            <form onSubmit={handleSubmit(onSubmit)} method="POST">
                <div className="mx-auto py-1 flex gap-4">
                    <FormInputField
                        placeholder={'Flaga'}
                        errors={errors?.flag || handleBackendErrors('flag')}
                        registerOpts={register('flag', {
                            required: formTexts.requiredField
                        })}
                        additionalStyles={'flex-auto appearance-none rounded shadow p-2 text-grey-dark mr-2'}
                    />

                    <div className="w-1/3">
                        <SubmitButton loading={loading} loadingText={'Wysyłanie...'} text={'Wyślij'} />
                    </div>
                </div>
            </form>
        </div>
    );
};

export default SolveForm;
