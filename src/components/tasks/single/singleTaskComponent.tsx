import React, { useEffect, useState } from 'react';
import { Task } from '../../../models/task';
import { useToasts } from 'react-toast-notifications';
import LoadingSpinner from '../../spinner/loadingSpinner';
import { tasksService } from '../../../services/tasksService';
import SingleTaskContent from './singleTaskContent';

interface SingleTaskComponentProps {
    id: number;
    refreshTasksCallback: (() => void) | undefined;
}

const SingleTaskComponent = ({ id, refreshTasksCallback }: SingleTaskComponentProps) => {
    const [task, setTask] = useState<Task>();
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(false);
    const { addToast } = useToasts();

    useEffect(() => {
        tasksService
            .getOne(id)
            .then((res) => {
                setTask(res);
            })
            .catch((err) => {
                setError(err);
                addToast('Coś poszło nie tak :(', {
                    appearance: 'error'
                });
                console.error(err);
            })
            .finally(() => setLoading(false));
    }, []);

    const successRender = () => {
        return (
            <>
                {loading && <LoadingSpinner />}
                {!loading && <SingleTaskContent task={task as Task} refreshTasksCallback={refreshTasksCallback} />}
            </>
        );
    };

    return <>{!error && successRender()}</>;
};

export default SingleTaskComponent;
