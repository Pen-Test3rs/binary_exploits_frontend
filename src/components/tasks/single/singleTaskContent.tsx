import React, { useState } from 'react';

import { markdown } from '../../../remarkable/remarkable';
import { Task, TaskStatus } from '../../../models/task';
import SingleTaskContainer from '../../styled-components/tasks/SingleTaskContainer';
import { AttachmentModel } from '../../../models/attachment';
import { taskService } from '../../../services/taskService';
import SolveForm from './solveForm';
import { wrapTags } from '../../shared/tags/wrapTags';
import ArticleCard from '../../articles/articleCard';
import { useToasts } from 'react-toast-notifications';
import { formTexts } from '../../shared/form/formTexts';
import { useAppDispatch } from '../../../context/hooks';
import { solveTask } from '../../../context/userReducer';
import TaskSolvedBanner from './taskSolvedBanner';
import Attachment from '../../remarkable-components/attachment';
import { SolveData } from '../../../models/formData';
import { CgCheck, CgCopy } from 'react-icons/cg';

interface SingleTaskProps {
    task: Task;
}

const SingleTaskContent = ({ task }: SingleTaskProps) => {
    const [loading, setLoading] = useState(false);
    const [addressCopied, setAddressCopied] = useState(false);
    const [errors, setErrors] = useState({});
    const { addToast } = useToasts();
    const [status, setStatus] = useState(task.status);
    const dispatch = useAppDispatch();

    const onSubmit = (data: SolveData) => {
        data.id = task.id;
        if (loading) {
            return;
        }

        setLoading(true);
        taskService
            .sendSolution(data)
            .then(() => {
                setLoading(false);
                dispatch(solveTask());
                setStatus(TaskStatus.SOLVED);
            })
            .catch((e) => {
                setLoading(false);
                const err = e.response?.data;
                if (err) {
                    setErrors({
                        flag: err?.flag?.slice(0, 1)
                    });
                } else {
                    setErrors({});
                    addToast(formTexts.genericError, {
                        appearance: 'error'
                    });
                }
            });
    };

    const wrapAttachments = (attachments: AttachmentModel[]) => {
        return (
            <div className="flex flex-wrap justify-center">
                {attachments.map((a, i) => {
                    const filename = a.file.split('/').pop();
                    return (
                        <div key={i} className="pr-2">
                            <Attachment href={a.file} onTaskModal>
                                {filename}
                            </Attachment>
                        </div>
                    );
                })}
            </div>
        );
    };

    return (
        <SingleTaskContainer>
            <div className="flex flex-col gap-2 px-5 py-3 bg-indigo-700">
                <div className="flex flex-col sm:flex-row justify-between w-full text-gray-50 sm:items-center">
                    <h3 className="flex text-shadow">{task.title}</h3>
                    <h4 className="flex mr-8 text-shadow">{task.points}&nbsp;punktów</h4>
                </div>
                {task.labels.length > 0 && (
                    <div className="flex-col w-full justify-center">{wrapTags(task.labels, true)}</div>
                )}
            </div>
            <div className="flex flex-wrap justify-center m-5 mt-4 ">
                <div className="w-full lg:w-1/2 bg-white p-2 shadow rounded">{markdown.render(task.description)}</div>
                <div className="w-full lg:w-1/2 lg:pl-6 mt-2 lg:mt-0">
                    <div className="flex flex-col gap-1.5">
                        {task.articles && task.articles.length > 0 && (
                            <>
                                <h4 className="font-bold text-center -mb-2">Powiązane wpisy</h4>
                                <div className="flex flex-wrap justify-center">
                                    {task.articles.map((article) => {
                                        return (
                                            <div key={article.id} className="w-4/6 lg:w-full pt-2">
                                                <ArticleCard article={article} onTaskModal={true} />
                                            </div>
                                        );
                                    })}
                                </div>
                            </>
                        )}
                        <h4 className="font-bold text-center">Rozwiąż zadanie</h4>
                        <button
                            className="w-full"
                            onClick={() => {
                                navigator.clipboard.writeText(`nc ${task.address} ${task.port}`);
                                setAddressCopied(true);
                            }}
                        >
                            <div className="flex flex-row bg-white rounded px-2 py-1.5 text-center shadow justify-between hover:shadow-md">
                                <div
                                    className={`opacity-0 flex flex-col justify-center text-indigo-700 ${
                                        addressCopied ? 'text-4xl' : 'text-lg pr-2'
                                    }`}
                                >
                                    {addressCopied ? <CgCheck /> : <CgCopy />}
                                </div>
                                <div className="flex flex-col flex-grow">
                                    <div className="">
                                        <div className="text-xs px-2 font-bold">Adres serwera</div>
                                        <div className="pb-1 font-medium">{task.address}</div>
                                        <div className="text-xs px-2 font-bold">Port</div>
                                        <div className="font-medium">{task.port}</div>
                                    </div>
                                </div>

                                <div
                                    className={`flex flex-col justify-center text-indigo-700 ${
                                        addressCopied ? 'text-4xl' : 'text-lg pr-2'
                                    }`}
                                >
                                    {addressCopied ? <CgCheck /> : <CgCopy />}
                                </div>
                            </div>
                        </button>

                        {task.attachments.length > 0 && <h4 className="font-bold text-center">Załączniki</h4>}
                        {wrapAttachments(task.attachments)}
                    </div>
                </div>
                {status !== TaskStatus.SOLVED ? (
                    <SolveForm loading={loading} backendErrors={errors} onSubmit={onSubmit} />
                ) : (
                    <TaskSolvedBanner />
                )}
            </div>
        </SingleTaskContainer>
    );
};

export default SingleTaskContent;
