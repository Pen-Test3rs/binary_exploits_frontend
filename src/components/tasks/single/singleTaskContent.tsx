import React, { useState } from 'react';

import { markdown } from '../../../remarkable/remarkable';
import { Task, TaskStatus } from '../../../models/task';
import SingleTaskContainer from '../../styled-components/tasks/SingleTaskContainer';
import { AttachmentModel } from '../../../models/attachment';
import { SolveData } from '../../../models/solveData';
import { taskService } from '../../../services/taskService';
import SolveForm from './solveForm';
import { wrapTags } from '../../shared/tags/wrapTags';
import ArticleCard from '../../articles/articleCard';
import { useToasts } from 'react-toast-notifications';
import { formTexts } from '../../shared/form/formTexts';
import { useAppDispatch } from '../../../context/hooks';
import { solveTask } from '../../../context/userReducer';
import TaskSolvedBanner from './taskSolvedBanner';
import Attachment from '../../remarkable-components/attachment';

interface SingleTaskProps {
    task: Task;
}

const SingleTaskContent = ({ task }: SingleTaskProps) => {
    const [loading, setLoading] = useState(false);
    const [errors, setErrors] = useState({});
    const { addToast } = useToasts();
    const [status, setStatus] = useState(task.status);
    const dispatch = useAppDispatch();

    const onSubmit = (data: SolveData) => {
        data.id = task.id;
        if (loading) {
            return;
        }

        setLoading(true);
        taskService
            .sendSolution(data)
            .then((response) => {
                setLoading(false);
                if (response.success) {
                    dispatch(solveTask());
                    setStatus(TaskStatus.SOLVED);
                } else {
                    const errorMap = {
                        flag: 'Nieprawidłowa flaga'
                    };
                    setErrors(errorMap);
                }
            })
            .catch(() => {
                setErrors({});
                addToast(formTexts.genericError, {
                    appearance: 'error'
                });
            });
    };

    const wrapAttachments = (attachments: AttachmentModel[]) => {
        return attachments.map((a, i) => {
            const filename = a.file.split('/').pop();
            return <Attachment href={a.file}>{filename}</Attachment>;
        });
    };

    return (
        <SingleTaskContainer>
            <div className="flex flex-wrap items-center mr-8">
                <h3 className="flex-col w-2/3">{task.title}</h3>
                <h4 className="flex-col w-1/3 text-right">{task.points} punktów</h4>
                <div className="flex-col w-full justify-center">
                    {task.labels.length > 0 && <> Tagi: </>}
                    {wrapTags(task.labels)}
                </div>
            </div>
            <hr className="w-full" />
            <div className="flex flex-wrap justify-center">
                <div className="w-full lg:w-1/2">{markdown.render(task.description)}</div>
                <div className="w-full lg:w-1/2 lg:pl-6 mt-2 lg:mt-0">
                    {task.articles && task.articles.length > 0 && (
                        <>
                            <div className="font-bold">Powiązane wpisy</div>
                            <div className="flex flex-wrap justify-center">
                                {task.articles.map((article) => {
                                    return (
                                        <div key={article.id} className="w-4/6 lg:w-full py-2">
                                            <ArticleCard article={article} />
                                        </div>
                                    );
                                })}
                            </div>
                        </>
                    )}
                    <div className="font-bold mt-1.5">Adres serwera z zadaniem:</div>
                    <div className="inline-flex">
                        <div className="font-mono bg-gray-800 rounded-lg px-2 py-1.5 my-1 text-white text-base">
                            {task.address}:{task.port}
                        </div>
                    </div>
                    {task.attachments.length > 0 && <div className="font-bold mt-1.5">Załączniki</div>}
                    {wrapAttachments(task.attachments)}
                </div>
                {status !== TaskStatus.SOLVED ? (
                    <SolveForm loading={loading} backendErrors={errors} onSubmit={onSubmit} />
                ) : (
                    <TaskSolvedBanner />
                )}
            </div>
        </SingleTaskContainer>
    );
};

export default SingleTaskContent;
