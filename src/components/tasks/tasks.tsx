import React, { useEffect, useState } from 'react';
import TaskCard from './taskCard';
import Pagination from '../pagination/pagination';
import { Levels } from './levels';
import { useAppSelector } from '../../context/hooks';
import { isLoggedIn } from '../../context/userReducer';
import { Redirect } from 'react-router-dom';
import { useToasts } from 'react-toast-notifications';
import { tasksService } from '../../services/tasksService';
import { apiUrls } from '../../utils/apiUrls';
import { TasksList } from '../../models/task';

const TasksComponent = () => {
    const [tasks, setTasks] = useState<TasksList[]>([]);
    useEffect(() => {
        (async () => {
            tasksService
                .get(apiUrls.TASKS)
                .then((a) => {
                    console.log(a);
                    setTasks(a);
                })
                .catch((err) => {
                    //TODO: handle error
                });
        })();
    }, []);

    const logged = useAppSelector(isLoggedIn);
    const { addToast } = useToasts();
    let cards = [];
    /*let cards = [...Array(13)].map((e, i) => (
      <TaskCard
          key={i}
          category={'Przepełnienie bufora'}
          text={
              'Przepełnienie bufora – błąd programistyczny polegający na zapisaniu do wyznaczonego obszaru pamięci większej ilości danych niż zarezerwował na ten cel programista. Taka sytuacja prowadzi do zamazania danych znajdujących się w pamięci bezpośrednio za buforem, a w rezultacie do błędnego działania programu.'
          }
          level={Levels.Medium}
      />
  ));*/
    cards.push(
        <TaskCard
            key={28}
            title={'Przepełnienie bufora'}
            labels={[]}
            // text={
            //     'Przepełnienie bufora – błąd programistyczny polegający na zapisaniu do wyznaczonego obszaru pamięci większej ilości danych niż zarezerwował na ten cel programista. Taka sytuacja prowadzi do zamazania danych znajdujących się w pamięci bezpośrednio za buforem, a w rezultacie do błędnego działania programu.'
            // }
            level={Levels.Easy}
        />
    );
    cards.push(
        <TaskCard
            key={29}
            labels={[]}
            //category={'Jakaś inna kategoria'}
            title={'dsafsadfsdfsdgdfgfddhfghgfd'}
            level={Levels.Medium}
        />
    );
    cards.push(
        <TaskCard
            key={30}
            labels={[]}
            //category={'Jeszcze inna kategoria'}
            title={'sdgfdsgdsfgsdbgfdvrsdfgfdghggs'}
            level={Levels.Hard}
        />
    );
    if (!logged) {
        addToast('Musisz być zalogowany, aby wyświetlić dashboard!', {
            appearance: 'error'
        });
        return <Redirect to={'/login'} />;
    }
    return (
        <>
            <div className="flex flex-wrap w-full">
                {/*<TaskCard*/}
                {/*    category={'Przepełnienie bufora'}*/}
                {/*    text={*/}
                {/*        'Przepełnienie bufora – błąd programistyczny polegający na zapisaniu do wyznaczonego obszaru pamięci większej ilości danych niż zarezerwował na ten cel programista. Taka sytuacja prowadzi do zamazania danych znajdujących się w pamięci bezpośrednio za buforem, a w rezultacie do błędnego działania programu.'*/}
                {/*    }*/}
                {/*    level={Levels.Easy}*/}
                {/*/>*/}
                {/*<TaskCard*/}
                {/*    category={'Jakaś inna kategoria'}*/}
                {/*    text={'dsafsadfsdfsdgdfgfddhfghgfd'}*/}
                {/*    level={Levels.Medium}*/}
                {/*/>*/}
                {/*<TaskCard*/}
                {/*    category={'Jeszcze inna kategoria'}*/}
                {/*    text={'sdgfdsgdsfgsdbgfdvrsdfgfdghggs'}*/}
                {/*    level={Levels.Hard}*/}
                {/*/>*/}
                <Pagination data={cards} pageLimit={Math.min(Math.ceil(cards.length / 6), 5)} dataLimit={6} />
            </div>
            {/*<div className="flex flex-wrap mt-4">*/}
            {/*    <div className="w-full xl:w-8/12 mb-12 xl:mb-0 px-4">/!*<CardPageVisits />*!/</div>*/}
            {/*    <div className="w-full xl:w-4/12 px-4">/!*<CardSocialTraffic />*!/</div>*/}
            {/*</div>*/}
        </>
    );
};

export default TasksComponent;
