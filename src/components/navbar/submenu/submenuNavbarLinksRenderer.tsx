import React from 'react';
import SubmenuNavbarLink from './submenuNavbarLink';
import useOnclickOutside from 'react-cool-onclickoutside';
import { useAppDispatch, useAppSelector } from '../../../context/hooks';
import { isLoggedIn, logout } from '../../../context/userReducer';
import { useToasts } from 'react-toast-notifications';

interface SubMenuNavbarLinksRendererProps {
    visible: boolean;
    hideSubMenu: () => void;
}

interface LinkProps {
    to: string;
    text: string;
    show?: boolean;
    additionalActions?: (() => void)[];
}

const logoutSuccessfulText = 'Logged out successfully!';

const SubMenuNavbarLinksRenderer = ({ visible, hideSubMenu }: SubMenuNavbarLinksRendererProps) => {
    const logged = useAppSelector(isLoggedIn);
    const dispatch = useAppDispatch();
    const { addToast } = useToasts();

    const logOut = () => {
        dispatch(logout());
        addToast(logoutSuccessfulText, {
            appearance: 'success'
        });
    };

    const ref = useOnclickOutside(
        //TODO: refactor this, find another method
        () => {
            hideSubMenu();
        },
        {
            ignoreClass: 'my-ignore-class'
        }
    );

    const submenuLinks: LinkProps[] = [
        {
            to: '/profile',
            text: 'My profile',
            show: true
        },
        {
            to: '/dashboard',
            text: 'Log out',
            show: logged,
            additionalActions: [logOut]
        },
        {
            to: '/login',
            text: 'Log in',
            show: !logged
        },
        {
            to: '/register',
            text: 'Register',
            show: !logged
        }
    ];

    return (
        <div
            className="z-10 origin-top-right absolute right-0 mt-2 w-48 rounded-md shadow-lg py-1 bg-white ring-1 ring-black ring-opacity-5 focus:outline-none"
            style={{
                display: visible ? '' : 'none'
            }}
            ref={ref}
        >
            {submenuLinks
                .filter(({ show }: LinkProps) => show)
                .map(({ to, text, additionalActions }) => {
                    return (
                        <SubmenuNavbarLink
                            to={to}
                            text={text}
                            onClickActions={[hideSubMenu, ...(additionalActions || [])]}
                            key={text}
                        />
                    );
                })}
        </div>
    );
};

export default SubMenuNavbarLinksRenderer;
